const express = require("express");
const tr = require("tor-request");
const puppeteer = require('puppeteer');
const http = require("http");
const app = express();
const server = http.createServer(app);

const LIMIT = 500;
const COOLDOWN_TIME = 10000;

if(process.env.NODE_ENV === "test")
    tr.TorControlPort.password = "giraffe";
else
    tr.TorControlPort.password = "torProxy@123";

let referralCodes = new Map();
const timedOutCodes = [];

async function target() {
    renewIP();
    for(let [code, times] of referralCodes){
        const browser = await puppeteer.launch({
            headless: true,
            args: [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                `--proxy-server=socks5://127.0.0.1:9050`,
                '--disable-dev-shm-usage',
                '--disable-accelerated-2d-canvas',
                '--no-first-run',
                '--no-zygote',
                '--single-process',
                '--disable-gpu'
            ]
        });
        const page = await browser.newPage();

        try{
            await page.goto(`https://yubo.live/en?referral=${code}&source=whoadd`);
        }catch(err){
            console.log(`*- timed out request for code ${code} but should be OK.`);
        }

        browser.close();

        referralCodes.set(code, ++times);
        console.log(code, times);
        
        if(referralCodes.get(code) >= LIMIT){
            referralCodes.delete(code);
            console.log(`code ${code} reached the limit`);
            addToCooldown(code);
        }

    }

    if(referralCodes.size === 0){
        const checkForTargets = setInterval(() => {
            console.log("checking for targets");
            if(referralCodes.size > 0){
                clearInterval(checkForTargets);
                target();
            }
        }, 5000);
    } 
    else{
        target();
    }
}


function addToCooldown(code)
{
    timedOutCodes.push(code);
    setTimeout(() => {
        for(let i = 0, len = timedOutCodes.length; i < len; ++i){
            if(code === timedOutCodes[i]){
                console.log(`code ${timedOutCodes[i]} can now be used again.`);
                timedOutCodes.splice(i, 1);
            }
        }
    }, COOLDOWN_TIME);
}

function renewIP(){
    tr.renewTorSession(function(err, msg){
        if(err)
            console.log(err);
        else
            console.log(msg);
    });
}

app.get("/begin", (req, res) => 
{
    target();
});

app.get("/add/:code", (req, res) => 
{
    for(const [key] of referralCodes){
        if(key === req.params.code){
            res.sendStatus(401);
        }
    }
    referralCodes.set(req.params.code, 0);
    res.sendStatus(200);
});

app.get("/openreferrals", (req, res) => 
{
    for(const [key] of referralCodes){
        console.log(key);
    }
    res.sendStatus(200);
});

const PORT = process.env.PORT || 3001;
server.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});